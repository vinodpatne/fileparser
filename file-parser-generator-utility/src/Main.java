
import java.io.File;
import java.io.FileInputStream;
import java.util.List;
import java.util.Properties;

import com.mc.utils.codegen.CodeGenFactory;
import com.mc.utils.codegen.structure.AnnotationMetaData;
import com.mc.utils.codegen.structure.AnnotationParameter;
import com.mc.utils.codegen.structure.ClassMetaData;
import com.mc.utils.codegen.structure.MemberMetaData;
import com.sun.codemodel.JCodeModel;

public class Main {

    private static final String OUTPUT_DIRECTORY = "output";

    public static void main(String[] args) throws Exception {

	Properties properties = new Properties();
	properties.load(new FileInputStream(new File("config", "application.properties")));
	String packageName = properties.getProperty("output.package.name");

	File configfile = new File("config", "Field_Mapping.csv");
	List<RecordConfig> recordConfigs = FieldMappingConfigParser.getFieldConfigs(configfile);

	for (RecordConfig recordConfig : recordConfigs) {
	    String className = recordConfig.getRecordClassName();
	    ClassMetaData classMetaData = new ClassMetaData();
	    classMetaData.setPackageName(packageName);

	    classMetaData.addImportClass("com.ancientprogramming.fixedformat4j.annotation.Align.LEFT");
	    classMetaData.addImportClass("com.ancientprogramming.fixedformat4j.annotation.Fields");
	    classMetaData.addImportClass("com.ancientprogramming.fixedformat4j.annotation.Field");

	    classMetaData.setClassName(className);
	    classMetaData.setJavaDocs("This class is +generated by Vinod.");

	    AnnotationMetaData annotationMetaData = new AnnotationMetaData();
	    annotationMetaData.setMainAnnotationClass("com.ancientprogramming.fixedformat4j.annotation.Record");
	    classMetaData.addAnnotationMetaData(annotationMetaData);

	    List<FieldConfig> fieldConfigs = recordConfig.getFieldConfigs();
	    for (FieldConfig fieldConfig : fieldConfigs) {

		System.out.println("Start processing " + fieldConfig.getFieldName() + " field.");

		MemberMetaData memberMetaData = new MemberMetaData();
		memberMetaData.setMemberName(fieldConfig.getFieldName());

		memberMetaData.setJavaDocs(fieldConfig.getFieldDesc());
		memberMetaData.setDataType(fieldConfig.getDataType());
		memberMetaData.setRequireGetterSetterMethods(true);

		AnnotationMetaData fieldsAnnotationMetaData = new AnnotationMetaData();
		fieldsAnnotationMetaData.setMainAnnotationClass("com.ancientprogramming.fixedformat4j.annotation.Fields");
		// fieldsAnnotationMetaData.setMainAnnotationClass("Fields");

		AnnotationMetaData fieldAnnotationMetaData = new AnnotationMetaData();
		fieldAnnotationMetaData.setMainAnnotationClass("com.ancientprogramming.fixedformat4j.annotation.Field");
		fieldAnnotationMetaData.addAnnotationParameter(new AnnotationParameter("offset", "int", fieldConfig.getOffset()));
		fieldAnnotationMetaData.addAnnotationParameter(new AnnotationParameter("length", "int", fieldConfig.getLength()));

		if (fieldConfig.getAlign() != null) {
		    fieldAnnotationMetaData.addAnnotationParameter(new AnnotationParameter("align",
			    "com.ancientprogramming.fixedformat4j.annotation.Align." + fieldConfig.getAlign(), true));
		}

		fieldAnnotationMetaData.addAnnotationParameter(new AnnotationParameter("paddingChar", "char", fieldConfig.getPaddingChar()));

		fieldsAnnotationMetaData.addAnnotationMetaData(fieldAnnotationMetaData);
		memberMetaData.addGetterAnnotationMetaData(fieldsAnnotationMetaData);

		classMetaData.addMemberMetaData(memberMetaData);
	    }

	    System.out.println("Generating " + classMetaData.getClassName() + " class.");

	    JCodeModel codeModel = CodeGenFactory.createClass(classMetaData);

	    CodeGenFactory.writeCodeModel(codeModel, OUTPUT_DIRECTORY);

	}

    }

}
